read(number): Reads from the file based on the mode in which it was openedâ€”'rb' for binary and 'rt' for text.

For 'rb': Reads the specified number of bytes and returns them as a bytes object.
For 'rt': Reads the specified number of characters and returns them as a string.
In both modes, it can read the entire file if no number is specified.
Output Format: Bytes object for 'rb', String for 'rt'.

readline(): Reads a single line from the text file, including the existing newline character.
Output Format: String

readlines(number): Reads the specified number of lines from the text file or all lines if no number is specified. Each line includes the existing newline character.
Output Format: List of Strings, each element representing a line.

readinto(bytearray*): Reads bytes from the file and fills the given bytearray with them. *Nothing to do with the bytearray() function.
Output Format: Returns the number of bytes read, and the bytearray is modified in-place.
REMEMBER: The readinto(bytearray) method necessitates a pre-existing bytearray (or any writable buffer object) to read data into. This bytearray must be initialised 
beforehand, either on a previous line or elsewhere in the code, for instance, using the bytearray() function. A more concise approach, when the number of bytes 
read is not required, involves utilising the read() method as an argument within the bytearray() function during initialisation. Example: bytearray(stream.read()).



write(string): Writes the given string to a text file, appending it at the current file position.
Output Format: Returns the number of characters written.

write(bytearray): Writes all the bytes in the given bytearray to a file, appending them at the current file position.
Output Format: Returns the number of bytes written.