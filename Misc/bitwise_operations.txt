Bitwise OR (|)
Returns 1 if either bit is 1 or both are 1.              Even n | 1, just add 1;  Odd n | 1, stays the same.  SETS LEAST SIGNIFICANT BIT!

Bitwise AND (&)
Returns 1 only if both bits are 1.                       Even n & 1, becomes 0;  Odd n & 1, becomes 1.    CHECKS IF ITS ODD!

Bitwise XOR (^)
Returns 1 if exactly one of the bits is 1, but not both. (Exclusive OR)         Even n ^ 1, just add 1;  Odd n ^ 1, minus 1.    FLIPS LEAST SIGNIFICANT BIT!

Bitwise NOT (~)         NEGATES IT MINUS AN EXTRA 1!
n = -n - 1

Bitwise n << 1       n = n * 2

Bitwise n >> 1       n = n / 2

Bitwise 
Quick Examples:

3 | 2 = 3
0011
0010
----
0011


3 & 2 = 2
0011
0010
----
0010


3 ^ 2 = 1
0011
0010
----
0001


~3 = -4
0011 -> NOT
1100 -> -4 in Two's Complement


Bitwise Left Shift (<<):
3 << 1 equals 6
0011 << 1
0110  (6 in decimal)

Bitwise Right Shift (>>):
Example: 1 >> 1 equals 0
0001 >> 1
0000  (0 in decimal)



Setting least significant bit of the first list to get the second list (use `| 1` on each first_list element):

[1, 2, 3, 4]
[1, 3, 3, 5]

|
0001
0001
----
0001


|
0010
0001
----
0011


|
0011
0001
----
0011


|
0100
0001
----
0101