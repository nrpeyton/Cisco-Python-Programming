ISSUE/CAUSE                                                                                                                               ERROR
-----------                                                                                                                               -----

An AttributeError occurs when trying to access a non-existent property or method of an object (anything following a dot '.').             AttributeError                   BaseException ← Exception ← AttributeError

NameError is raised when you try to access a local or global name (like a variable, function, or class) that has not been defined.        NameError                        BaseException ← Exception ← NameError

A TypeError is raised for operations on mismatched data types where the operation doesn't make sense for the data type, (like adding      TypeError                        BaseException ← Exception ← TypeError
a string to an integer) or when inheritance structures in classes lead to an unclear hierarchy, preventing a consistent method 
resolution order (MRO).  TypeErrors also arise if the number of arguments supplied doesn't match a function's parameter signature.

ModuleNotFoundError is raised if attempting to import a module that cannot be found.  For example, because the sys.path list has          ModuleNotFoundError              BaseException ← Exception ← ImportError ← ModuleNotFoundError
not been appended, or attempting to use the 'import' keyword on its own without 'from' to import something inside a module.


A ValueError is when the data type is correct, but the content within that data type isn't formatted or isn't appropriate for the         ValueError                       BaseException ← Exception ← ValueError
operation being attempted.  For example, with `i = int("Hello!")` the type is correct because int() can convert other data types
(i.e., a string '123' into an integer), so it expects the string to be formatted as numbers.  The problem is with the contents,
not the data type.

FileNotFoundError: Attempting to open a file that does not exist causes a FileNotFoundError.                                              FileNotFoundError                BaseException ← Exception ← OSError ← FileNotFoundError

IndexError is a concrete exception raised when you try to access a non-existent sequence's element (e.g., a list's element).              IndexError                       BaseException ← Exception ← LookupError ← IndexError


ArithmeticError is an abstract exception including all exceptions caused by arithmetic operations like zero division or an                ArithmeticError                  BaseException ← Exception ← ArithmeticError
argument's invalid domain.

KeyError is a concrete exception raised when there is an attempt to access a collection's non-existent element (for example: a            KeyError                         BaseException ← Exception ← LookupError ← KeyError
dictionary's element).



Concrete Exceptions:

ValueError
TypeError
IndexError
KeyError
ImportError
NameError
FileNotFoundError
ZeroDivisionError
AttributeError
SyntaxError


Not Concrete:

BaseException
ArithmeticError
IO Error (was merged into OS Error with 3.3)
OS Error




ORDER (Specific to More General):

try:
    # Some code that might raise different types of exceptions

except ValueError as e:
    print(e)
except ArithmeticError as e:
    print(e)
except Exception as e:
    print(e)

SYNTAX: Unnamed exception branch MUST be placed last.



BaseException
   +---Exception
   |   +---TypeError
   |   +---StopAsyncIteration
   |   +---StopIteration
   |   +---ImportError
   |   |   +---ModuleNotFoundError
   |   |   +---ZipImportError
   |   +---OSError
   |   |   +---ConnectionError
   |   |   |   +---BrokenPipeError
   |   |   |   +---ConnectionAbortedError
   |   |   |   +---ConnectionRefusedError
   |   |   |   +---ConnectionResetError
   |   |   +---BlockingIOError
   |   |   +---ChildProcessError
   |   |   +---FileExistsError
   |   |   +---FileNotFoundError
   |   |   +---IsADirectoryError
   |   |   +---NotADirectoryError
   |   |   +---InterruptedError
   |   |   +---PermissionError
   |   |   +---ProcessLookupError
   |   |   +---TimeoutError
   |   |   +---UnsupportedOperation
   |   |   +---herror
   |   |   +---gaierror
   |   |   +---timeout
   |   |   +---Error
   |   |   |   +---SameFileError
   |   |   +---SpecialFileError
   |   |   +---ExecError
   |   |   +---ReadError
   |   +---EOFError
   |   +---RuntimeError
   |   |   +---RecursionError
   |   |   +---NotImplementedError
   |   |   +---_DeadlockError
   |   |   +---BrokenBarrierError
   |   +---NameError
   |   |   +---UnboundLocalError
   |   +---AttributeError
   |   +---SyntaxError
   |   |   +---IndentationError
   |   |   |   +---TabError
   |   +---LookupError
   |   |   +---IndexError
   |   |   +---KeyError
   |   |   +---CodecRegistryError
   |   +---ValueError
   |   |   +---UnicodeError
   |   |   |   +---UnicodeEncodeError
   |   |   |   +---UnicodeDecodeError
   |   |   |   +---UnicodeTranslateError
   |   |   +---UnsupportedOperation
   |   +---AssertionError
   |   +---ArithmeticError
   |   |   +---FloatingPointError
   |   |   +---OverflowError
   |   |   +---ZeroDivisionError
   |   +---SystemError
   |   |   +---CodecRegistryError
   |   +---ReferenceError
   |   +---BufferError
   |   +---MemoryError
   |   +---Warning
   |   |   +---UserWarning
   |   |   +---DeprecationWarning
   |   |   +---PendingDeprecationWarning
   |   |   +---SyntaxWarning
   |   |   +---RuntimeWarning
   |   |   +---FutureWarning
   |   |   +---ImportWarning
   |   |   +---UnicodeWarning
   |   |   +---BytesWarning
   |   |   +---ResourceWarning
   |   +---error
   |   +---Verbose
   |   +---Error
   |   +---TokenError
   |   +---StopTokenizing
   |   +---Empty
   |   +---Full
   |   +---_OptionError
   |   +---TclError
   |   +---SubprocessError
   |   |   +---CalledProcessError
   |   |   +---TimeoutExpired
   |   +---Error
   |   |   +---NoSectionError
   |   |   +---DuplicateSectionError
   |   |   +---DuplicateOptionError
   |   |   +---NoOptionError
   |   |   +---InterpolationError
   |   |   |   +---InterpolationMissingOptionError
   |   |   |   +---InterpolationSyntaxError
   |   |   |   +---InterpolationDepthError
   |   |   +---ParsingError
   |   |   |   +---MissingSectionHeaderError
   |   +---InvalidConfigType
   |   +---InvalidConfigSet
   |   +---InvalidFgBg
   |   +---InvalidTheme
   |   +---EndOfBlock
   |   +---BdbQuit
   |   +---error
   |   +---_Stop
   |   +---PickleError
   |   |   +---PicklingError
   |   |   +---UnpicklingError
   |   +---_GiveupOnSendfile
   |   +---error
   |   +---LZMAError
   |   +---RegistryError
   |   +---ErrorDuringImport
   +---GeneratorExit
   +---SystemExit
   +---KeyboardInterrupt









EXCEPTION HANDLING DESIGN
Broad to Specific Handling: Exception handling is structured from more general to more specific to allow a program to respond to errors at 
varying levels of granularity. A general handler (superclass) deals with a wide range of issues, while more specific handlers (subclasses) 
address particular problems. This hierarchical handling is intentional and practical, ensuring that errors do not go unaddressed while also 
allowing for specific responses when needed.

Type Matching Over Attribute Access: When an exception is raised, Python's error handling mechanism looks for a match based on the exception's 
type, not its attributes or methods. This is fundamentally different from how objects typically interact in OOP, where attributes and methods 
of an object (and by inheritance, of its subclasses) are crucial to how it behaves or is treated. In exception handling, the focus is on the 
type of error (i.e., its class) rather than on the properties or behaviors of the error object.

Designed for Error Propagation: Exceptions are designed to propagate up the call stack until they find a matching handler. This design ensures
that errors are not silently ignored but are either handled explicitly or cause the program to terminate with an error message. The ability 
of a superclass to catch exceptions from its subclasses facilitates this by providing a "catch-all" mechanism for unhandled specific errors.

CONCEPTUAL SHIFT
Operational, Not Structural: The operation of catching exceptions in a superclass doesn't rely on inheriting attributes or methods from 
subclasses (which, as you noted, is not how inheritance works). Instead, it's about structurally placing a safety net for any errors that fall
within a broad category defined by the superclass. This mechanism is purpose-built for error handling and is structured to maximize code 
robustness and clarity.

Purposeful Design: This design choice is purposeful, reflecting the need for error handling mechanisms to be both comprehensive and manageable. 
By allowing superclasses to handle exceptions from their subclasses, Python's design ensures that developers have the flexibility to write 
error handlers that are as generic or as specific as needed without complicating the inheritance hierarchy.

In summary, while the mechanism of exception handling utilizes the class hierarchy in a way that mirrors inheritance, its logic and purpose are 
tailored specifically to the needs of error management, rather than reflecting the traditional OOP model of attribute and method inheritance.